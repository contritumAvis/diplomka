// import { Request, Response } from "express";
// import prisma from "../prisma";

// export const createCategory = async (req: Request, res: Response) => {
//   try {
//     const { name } = req.body;
//     const category = await prisma.category.create({ data: { name } });
//     res.status(201).json(category);
//   } catch (error) {
//     res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" });
//   }
// };

// export const getCategories = async (_req: Request, res: Response) => {
//   try {
//     const categories = await prisma.category.findMany();
//     res.json(categories);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π" });
//   }
// };










// import { Request, Response } from "express";
// import prisma from "../prisma";

// // --- —Å—Ç–∞—Ä–æ–µ ---
// export const createCategory = async (req: Request, res: Response) => {
//   try {
//     const { name, slug } = req.body;
//     const category = await prisma.category.create({ data: { name, slug } });
//     res.status(201).json(category);
//   } catch (error) {
//     res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" });
//   }
// };

// export const getCategories = async (_req: Request, res: Response) => {
//   try {
//     const categories = await prisma.category.findMany();
//     res.json(categories);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π" });
//   }
// };

// // --- –Ω–æ–≤–æ–µ ---
// export const getProductsByCategory = async (req: Request, res: Response) => {
//   try {
//     const { slug } = req.params;

//     const category = await prisma.category.findUnique({
//       where: { slug },
//       include: {
//         products: {
//           include: { brand: true },
//         },
//       },
//     });

//     if (!category) return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

//     res.json(category.products);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" });
//   }
// };

// export const getProductsByCategoryAndBrand = async (req: Request, res: Response) => {
//   try {
//     const { categorySlug, brandSlug } = req.params;

//     const products = await prisma.product.findMany({
//       where: {
//         category: { slug: categorySlug },
//         brand: { slug: brandSlug },
//       },
//       include: { brand: true, category: true },
//     });

//     res.json(products);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥–∞" });
//   }
  
// };



// import { Request, Response } from "express";
// import prisma from "../prisma";

// // --- CRUD –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
// export const createCategory = async (req: Request, res: Response) => {
//   try {
//     const { name, slug } = req.body;
//     const category = await prisma.category.create({ data: { name, slug } });
//     res.status(201).json(category);
//   } catch (error) {
//     res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" });
//   }
// };

// export const getCategories = async (_req: Request, res: Response) => {
//   try {
//     const categories = await prisma.category.findMany();
//     res.json(categories);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π" });
//   }
// };

// // --- —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
// export const getProductsByCategory = async (req: Request, res: Response) => {
//   try {
//     const { slug } = req.params;

//     const category = await prisma.category.findUnique({
//       where: { slug },
//       include: {
//         products: {
//           include: { brand: true },
//         },
//       },
//     });

//     if (!category) return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

//     res.json(category.products);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" });
//   }
// };

// // --- —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –±—Ä–µ–Ω–¥—É ---
// export const getProductsByCategoryAndBrand = async (req: Request, res: Response) => {
//   try {
//     const { categorySlug, brandSlug } = req.params;

//     const products = await prisma.product.findMany({
//       where: {
//         category: { slug: categorySlug },
//         brand: { slug: brandSlug },
//       },
//       include: { brand: true, category: true },
//     });

//     res.json(products);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥–∞" });
//   }
// };

// // --- –±—Ä–µ–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
// export const getBrandsByCategory = async (req: Request, res: Response) => {
//   try {
//     const { slug } = req.params;

//     const brands = await prisma.brand.findMany({
//       where: {
//         products: {
//           some: {
//             category: { slug },
//           },
//         },
//       },
//       include: {
//         products: {
//           where: { category: { slug } },
//           select: { id: true },
//         },
//       },
//     });

//     res.json(brands);
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" });
//   }
// };
import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üîπ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const createCategory = async (req: Request, res: Response) => {
  try {
    const { name, slug } = req.body;
    
    if (!name) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    const category = await prisma.category.create({
      data: {
        name,
        slug: slug || name.toLowerCase().replace(/\s+/g, "-"),
      },
    });

    res.status(201).json(category);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getCategories = async (req: Request, res: Response) => {
  try {
    const categories = await prisma.category.findMany();
    res.json(categories);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ slug
export const getCategoryBySlug = async (req: Request, res: Response) => {
  try {
    const { slug } = req.params;

    const category = await prisma.category.findUnique({
      where: { slug },
      include: { products: true },
    });

    if (!category) {
      return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(category);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ slug)
export const getProductsByCategory = async (req: Request, res: Response) => {
  try {
    const { slug } = req.params;

    const category = await prisma.category.findUnique({
  where: { slug },
  include: { 
    products: true,
    brands: true, // ‚úÖ –ø–æ–¥—Ç—è–Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
  },
});


    if (!category) {
      return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(category.products);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –±—Ä–µ–Ω–¥—É
export const getProductsByCategoryAndBrand = async (req: Request, res: Response) => {
  try {
    const { categorySlug, brandSlug } = req.params;

    const category = await prisma.category.findUnique({
      where: { slug: categorySlug },
      include: {
        products: {
          where: {
            brand: { slug: brandSlug },
          },
        },
      },
    });

    if (!category) {
      return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(category.products);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥—É:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –±—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getBrandsByCategory = async (req: Request, res: Response) => {
  try {
    const { slug } = req.params;

    const category = await prisma.category.findUnique({
      where: { slug },
      include: {
        products: {
          include: { brand: true },
        },
      },
    });

    if (!category) {
      return res.status(404).json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
    const brands = Array.from(
      new Map(
        category.products
          .filter((p) => p.brand)
          .map((p) => [p.brand!.id, p.brand])
      ).values()
    );

    res.json(brands);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
