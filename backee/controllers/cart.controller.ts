// import { Request, Response } from "express";
// import prisma from "../prisma";

// // --- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ---
// export const addToCart = async (req: Request, res: Response) => {
//   try {
//     const { userId, variantId, quantity } = req.body;

//     if (!userId || !variantId) {
//       return res.status(400).json({ message: "userId –∏ variantId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
//     }

//     const existingItem = await prisma.cartItem.findFirst({
//       where: { userId, variantId },
//     });

//     let cartItem;
//     if (existingItem) {
//       cartItem = await prisma.cartItem.update({
//         where: { id: existingItem.id },
//         data: { quantity: existingItem.quantity + (quantity || 1) },
//       });
//     } else {
//       cartItem = await prisma.cartItem.create({
//         data: {
//           userId,
//           variantId,
//           quantity: quantity || 1,
//         },
//       });
//     }

//     res.status(201).json(cartItem);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —é–∑–µ—Ä–∞ ---
// export const getCart = async (req: Request, res: Response) => {
//   try {
//     const { userId } = req.query;
//     if (!userId) return res.status(400).json({ message: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

//     const cart = await prisma.cartItem.findMany({
//       where: { userId: String(userId) },
//       include: {
//         variant: {
//           include: { product: true },
//         },
//       },
//     });

//     res.json(cart);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ---
// export const updateCartItem = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const { quantity } = req.body;

//     const updated = await prisma.cartItem.update({
//       where: { id: Number(id) },
//       data: { quantity },
//     });

//     res.json(updated);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ---
// export const removeFromCart = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;

//     await prisma.cartItem.delete({
//       where: { id: Number(id) },
//     });

//     res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };













// import { Request, Response } from "express";
// import prisma from "../prisma";

// // --- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ---
// export const addToCart = async (req: Request, res: Response) => {
//   try {
//     const userId = (req as any).userId; // üëà –±–µ—Ä—ë–º –∏–∑ —Ç–æ–∫–µ–Ω–∞
//     const { variantId, quantity } = req.body;

//     if (!variantId) {
//       return res.status(400).json({ message: "variantId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
//     }

//     const existingItem = await prisma.cartItem.findFirst({
//       where: { userId, variantId },
//     });

//     let cartItem;
//     if (existingItem) {
//       cartItem = await prisma.cartItem.update({
//         where: { id: existingItem.id },
//         data: { quantity: existingItem.quantity + (quantity || 1) },
//       });
//     } else {
//       cartItem = await prisma.cartItem.create({
//         data: {
//           userId,
//           variantId,
//           quantity: quantity || 1,
//         },
//       });
//     }

//     res.status(201).json(cartItem);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —é–∑–µ—Ä–∞ ---
// export const getCart = async (req: Request, res: Response) => {
//   try {
//     const userId = (req as any).userId; // üëà –∏–∑ —Ç–æ–∫–µ–Ω–∞

//     const cart = await prisma.cartItem.findMany({
//       where: { userId },
//       include: {
//         variant: {
//           include: { product: true },
//         },
//       },
//     });

//     res.json(cart);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ---
// export const updateCartItem = async (req: Request, res: Response) => {
//   try {
//     const userId = (req as any).userId;
//     const { id } = req.params;
//     const { quantity } = req.body;

//     const cartItem = await prisma.cartItem.findUnique({
//       where: { id: Number(id) },
//     });

//     if (!cartItem || cartItem.userId !== userId) {
//       return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏" });
//     }

//     const updated = await prisma.cartItem.update({
//       where: { id: Number(id) },
//       data: { quantity },
//     });

//     res.json(updated);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// // --- –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ---
// export const removeFromCart = async (req: Request, res: Response) => {
//   try {
//     const userId = (req as any).userId;
//     const { id } = req.params;

//     const cartItem = await prisma.cartItem.findUnique({
//       where: { id: Number(id) },
//     });

//     if (!cartItem || cartItem.userId !== userId) {
//       return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏" });
//     }

//     await prisma.cartItem.delete({
//       where: { id: Number(id) },
//     });

//     res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", err);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };








import { Request, Response } from "express";
import prisma from "../prisma";

// --- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ---
export const addToCart = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId; // –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const { variantId, quantity } = req.body;

    if (!variantId) {
      return res.status(400).json({ message: "variantId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const existingItem = await prisma.cartItem.findFirst({
      where: { userId, variantId },
    });

    const cartItem = existingItem
      ? await prisma.cartItem.update({
          where: { id: existingItem.id },
          data: { quantity: existingItem.quantity + (quantity || 1) },
        })
      : await prisma.cartItem.create({
          data: { userId, variantId, quantity: quantity || 1 },
        });

    res.status(201).json(cartItem);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// --- –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —é–∑–µ—Ä–∞ ---
export const getCart = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId;

    const cart = await prisma.cartItem.findMany({
      where: { userId },
      include: {
        variant: {
          include: { product: true },
        },
      },
    });

    res.json(cart);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// --- –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ---
export const updateCartItem = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId;
    const { id } = req.params;
    const { quantity } = req.body;

    const cartItem = await prisma.cartItem.findUnique({
      where: { id: Number(id) },
    });

    if (!cartItem || cartItem.userId !== userId) {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏" });
    }

    const updated = await prisma.cartItem.update({
      where: { id: Number(id) },
      data: { quantity },
    });

    res.json(updated);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// --- –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ---
export const removeFromCart = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId;
    const { id } = req.params;

    const cartItem = await prisma.cartItem.findUnique({
      where: { id: Number(id) },
    });

    if (!cartItem || cartItem.userId !== userId) {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏" });
    }

    await prisma.cartItem.delete({
      where: { id: Number(id) },
    });

    res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
