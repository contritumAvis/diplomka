generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  email         String   @unique
  
  role          String   @default("client")
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?  // –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ö—ç—à –ø–∞—Ä–æ–ª—è
  accounts      Account[]
  cartItems     CartItem[]
  favorites     Favorite[]
  posts         Post[]
  sessions      Session[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String?   @unique
  products Product[]
  brands   Brand[]   @relation("CategoryBrands")
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  slug       String?    @unique
  products   Product[]
  categories Category[] @relation("CategoryBrands")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  thumbnail   String?
  categoryId  Int?
  bx          Int?
  createdAt   DateTime         @default(now())

  brand       Brand?           @relation(fields: [brandId], references: [id])
  brandId     Int?
  category    Category?        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]
  favoritedBy Favorite[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id        Int        @id @default(autoincrement())
  productId Int
  sku       String?
  color     String?
  memory    String?
  storage   String?
  size      String?
  price     Float?
  stock     Int        @default(0)
  imageUrl  String?
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
}

model CartItem {
  id        Int            @id @default(autoincrement())
  userId    String
  variantId Int
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // üëà —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
}
